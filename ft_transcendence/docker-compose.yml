version: '3.9'

services:
  db:
    image: postgres:16.3
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - "5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    container_name: 'db'

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    container_name: 'redis'
    expose:
      - "6379"
    networks:
      - app-network

  backend:
    build: ./backend/
    container_name: 'backend'
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    working_dir: /backend
    ports:
      - "8000:8000"
    networks:
      - app-network

  daphne:
    build:
      context: ./backend/
      dockerfile: Dockerfile.daphne
    container_name: 'daphne'
    volumes:
      - ./backend/:/app/backend/
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8001:8001"
    networks:
      - app-network

  nginx:
    container_name: 'nginx'
    build:
      context: ./
      dockerfile: nginx/ssl-Dockerfile
    volumes:
      - ./frontend:/usr/share/nginx/html
    ports:
      # - "80:80"
      # - "443:443"
      - "3000:3000"
    networks:
      - app-network
    env_file:
      - .env
    depends_on:
      - backend

volumes:
  postgres_data:


networks:
  app-network:
    name: ft_transcendence
    driver: bridge
